#include <stdio.h>
#include <math.h>

// Function declarations
int is_prime(int n);
int is_triangular(int n);
int is_square(int n);
int is_hexagonal(int n);
int is_perfect(int n);

/* ===============================================================
   is_prime
   Checks whether a number is prime.
   Inputs: The number to check
   Outputs: None
   Returns: 1 if prime, 0 otherwise
   Author: Sean Anderson
   =============================================================== */
int is_prime(int n) {
    if (n <= 1)
        return 0;
    if (n <= 3)
        return 1;
    if (n % 2 == 0 || n % 3 == 0)
        return 0;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0)
            return 0;
    }
    return 1;
}

/* ===============================================================
   is_triangular
   Checks whether a number is triangular.
   Inputs: The number to check
   Outputs: None
   Returns: 1 if triangular, 0 otherwise
   Author: Sean Anderson
   =============================================================== */
int is_triangular(int n) {
    int root = sqrt(2 * n);
    return root * (root + 1) == 2 * n;
}

/* ===============================================================
   is_square
   Checks whether a number is square.
   Inputs: The number to check
   Outputs: None
   Returns: 1 if square, 0 otherwise
   Author: Sean Anderson
   =============================================================== */
int is_square(int n) {
    int root = sqrt(n);
    return root * root == n;
}

/* ===============================================================
   is_hexagonal
   Checks whether a number is hexagonal.
   Inputs: The number to check
   Outputs: None
   Returns: 1 if hexagonal, 0 otherwise
   Author: Sean Anderson
   =============================================================== */
int is_hexagonal(int n) {
    double x = (sqrt(8 * n + 1) + 1) / 4;
    return floor(x) == x;
}

/* ===============================================================
   is_perfect
   Checks whether a number is perfect.
   Inputs: The number to check
   Outputs: None
   Returns: 1 if perfect, 0 otherwise
   Author: Sean Anderson
   =============================================================== */
int is_perfect(int n) {
    return n == 6 || n == 28 || n == 496 || n == 8128 || n == 33550336;
}

// Opens file
int main() {
    FILE *file = fopen("numbers.txt", "r");
    if (file == NULL) {
        printf("Error opening file");
        return 1;
    }

    int num;
    while (fscanf(file, "%d", &num) == 1 && num >= 0) {
        printf("About the number %d\n", num);
        printf("%s\n", is_prime(num) ? "This number is prime" : "This number is not prime");
        printf("%s\n", is_triangular(num) ? "This number is triangular" : "This number is not triangular");
        printf("%s\n", is_square(num) ? "This number is square" : "This number is not square");
        printf("%s\n", is_hexagonal(num) ? "This number is hexagonal" : "This number is not hexagonal");
        printf("%s\n", is_perfect(num) ? "This number is perfect" : "This number is not perfect");
        printf("\n");
    }

    fclose(file);
    return 0;
}
