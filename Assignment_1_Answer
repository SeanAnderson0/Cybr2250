@ ============================================================
@
@ Palindrome problem for ARM - completed code.
@
@ Author: Bill Mahoney
@ For:    CYBR 2250
@
@ ============================================================

.equ SWI_WriteC,        0x00    @ Write to stdout
.equ SWI_Exit,          0x11    @ Exit gracefully
.equ SWI_Open,          0x66    @ Open file
.equ SWI_Close,         0x68    @ Close file
.equ SWI_ReadS,         0x6a    @ Read string from file
.equ SWI_WriteS,        0x69    @ Write string to stdout
.equ SWI_RdInt,         0x6c    @ Read an integer from a file
.equ SWI_PrInt,         0x6b    @ Write an integer to a file
.equ SWI_Disp,          0x204   @ Display a string on the LCD screen
.equ SWI_Check_button,  0x202   @ Check if button is pressed

.equ LINE_SIZE,         100     @ Each line of input < 100 bytes

.text                       
.global _start             
_start:                           
    ldr     r0, =in_file_name       @ Open up the file
    mov     r1, #0                  @ Read only
    swi     SWI_Open                @ Open the file
    bcs     file_not_found          @ Branch on carry set (it didn't work)
    ldr     r1, =file_handle        @ Save the file handle for later
    str     r0, [r1]

get:    ldr     r0, =file_handle        @ Read the next line of input
    ldr     r0, [r0]
    ldr     r1, =line
    mov     r2, #LINE_SIZE
    swi     SWI_ReadS               @ I SWI_ReadS gives the number of
    bcs     end_of_file             @ bytes read, it is in R0.
    subs    r0, r0, #1              @ A word like "radar" will have R0=6
    beq     end_of_file             @ because of the null character.

@ ========================================
@ Palindrome checking implementation
@
@ r1 - Pointer to the beginning of the string
@ r2 - Pointer to the end of the string
@ r3 - Temporary register for character comparison
@ r4 - Temporary register for character comparison
@
@ ========================================
    ldr     r1, =line                @ Pointer to the beginning of the string
    ldr     r2, =line                @ Pointer to the end of the string
    add     r2, r2, r0               @ Move end pointer to the end of the string
    palindrome_loop:
        cmp     r1, r2                  @ Check if pointers have crossed
        bge     palindrome_found        @ If they have, palindrome found
        ldrb    r3, [r1], #1            @ Load byte from the beginning, increment pointer
        ldrb    r4, [r2], #-1           @ Load byte from the end, decrement pointer
        cmp     r3, r4                  @ Compare characters
        beq     continue_checking       @ If they match, continue checking
        bne     not_palindrome          @ If they don't match, not a palindrome
    continue_checking:
        b       palindrome_loop         @ Continue checking
    palindrome_found:
        b       good                    @ Branch to label for palindrome
    not_palindrome:
        b       bad                     @ Branch to label for not palindrome
@ ========================================


good:   mov     r0, #1                  @ Print that it is
    ldr     r1, =it_is
    swi     SWI_WriteS
    b       get

bad:    mov     r0, #1                  @ Print that it is
    ldr     r1, =it_is_not
    swi     SWI_WriteS
    b       get

end_of_file:
    ldr     r0, =file_handle
    ldr     r0, [r0]
    swi     SWI_Close
    swi     SWI_Exit

file_not_found:                     
    mov     r0, #1                  @ Stdout
    ldr     r1, =in_file_error                                  
    swi     SWI_WriteS
    swi     SWI_Exit

@ ============================================================
@ 
@ Data
@ 
@ ============================================================

.data
file_handle:    .word   0x00
in_file_name:   .asciz  "pal.txt"
in_file_error:  .asciz  "Can't open the file. Shoot...\n"
it_is_not:      .asciz  "This was not a palindrome.\n"
it_is:          .asciz  "YES! This one IS a palindrome!\n"
newline:        .asciz  "\n"

line:           .skip   40      @ The line will be read into here
